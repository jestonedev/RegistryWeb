@using RegistryWeb.ViewModel
@using RegistryServices.ViewModel.Claims
@using RegistryServices.ViewModel.KumiAccounts
@using RegistryDb.Models.Entities.Claims
@using RegistryWeb.Extensions;
@model ClaimsVM;
@{
    Context.Session.Set("Controller", "Claims");
    Context.Session.Set("Action", "ClaimsReports");
    ViewData["Title"] = "Мастер массовых операций над исковыми работами";
    var text = "Количество записей: " + Model.PageOptions.TotalRows;
    var canEdit = ViewBag.CanEdit;
    var errorClaims = (List<Claim>)ViewData["ErrorClaims"];
}

@section Scripts
    {
    <script src="~/js/claim.reports.js" asp-append-version="true"></script>
}

<div class="col status"></div>

<h1>@ViewData["Title"]</h1>
<h4 class="mb-3">@text</h4>

@if (errorClaims != null && errorClaims.Any())
{
    <div class="alert alert-danger text-center">
        <p class="mb-0">
            Во время массовой операции были пропущены исковые работы со следующими реестровыми номерами:
            @(errorClaims.Select(v => v.IdClaim.ToString()).Aggregate((acc, v) => acc + ", " + v))
        </p>
        <p class="mb-0">Причина: @ViewBag.ErrorReason</p>
    </div>
}

<div class="form-row">
    <div class="form-group col-md-1 col-lg-3">
        <a class="form-control btn btn-primary" asp-controller="Claims" asp-action="Index" asp-route-isBack="true">Назад</a>
    </div>
    <div class="form-group col-md-2 col-lg-3">
        <a class="form-control btn btn-primary" asp-controller="Claims" asp-action="ClearSessionIds">Очистить</a>
    </div>
    <div class="form-group col-md-3 col-lg-3">
        <div class="dropdown">
            <button class="btn btn-success dropdown-toggle col-md-12" type="button" id="reportButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-document"></span>  Отчеты
            </button>
            <div class="dropdown-menu" aria-labelledby="reportButton">
                <button class="dropdown-item rr-report-request-to-bsk" @(Model.Claims.Any() ? "" : "disabled") href="#" data-id-claim="0">Запрос в БКС</button>
                <button class="dropdown-item rr-report-memo-to-lawyers" @(Model.Claims.Any() ? "" : "disabled") href="#" data-id-claim="0">СЗ в юридический отдел</button>
                <button class="dropdown-item" id="exportBtn" @(Model.Claims.Any() ? "" : "disabled") href="#">Экспорт</button>
            </div>
        </div>
    </div>
    <div class="form-group col-md-3 col-lg-3">
        <div class="dropdown">
            <button class="btn btn-info dropdown-toggle col-md-12" type="button" id="operationsButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="oi oi-pencil"></span>  Операции
            </button>
            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="operationsButton">
                <button class="dropdown-item" @(canEdit && Model.Claims.Any() ? "" : "disabled") href="#" id="addClaimState">Создать этап претензионно-исковой работы</button>
                <button class="dropdown-item" @(canEdit && Model.Claims.Any() ? "" : "disabled") href="#" id="setDeptPeriod">Установить период предъявления</button>
            </div>
        </div>
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th style="width:70px;">№</th>
            <th>Лицевой счет</th>
            <th>Адрес</th>
            <th width="100px"></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Claims.Any())
        {
            foreach (var item in Model.Claims)
            {
                List<KumiAccountTenancyInfoVM> kumiTenancyInfo = null;
                List<KumiAccountTenancyInfoVM> activeKumiTenancyInfo = null;
                if (item.IdAccountKumi != null && Model.TenancyInfoKumi.ContainsKey(item.IdAccountKumi.Value))
                {
                    kumiTenancyInfo = Model.TenancyInfoKumi[item.IdAccountKumi.Value];
                    activeKumiTenancyInfo = kumiTenancyInfo.Where(r => r.TenancyProcess.TenancyPersons.Any(p => p.ExcludeDate == null || p.ExcludeDate > DateTime.Now)
                    && (r.TenancyProcess.RegistrationNum == null || !r.TenancyProcess.RegistrationNum.EndsWith("н"))).ToList();
                }
                RegistryDb.Models.Entities.Payments.Payment lastPaymentInfo = null;
                if (item.IdAccount != null && Model.LastPaymentInfo.ContainsKey(item.IdAccount.Value))
                {
                    lastPaymentInfo = Model.LastPaymentInfo[item.IdAccount.Value];
                }

                <tr>
                    <td>@item.IdClaim</td>
                    <td>
                        @{
                            var accountBks = "";
                            var accountKumi = "";
                            if (item.IdAccount != null)
                            {
                                accountBks = item.IdAccountNavigation.Account + (item.IdAccountAdditionalNavigation == null ? "" : " / " + item.IdAccountAdditionalNavigation.Account);
                            }
                            if (item.IdAccountKumi != null)
                            {
                                accountKumi = item.IdAccountKumiNavigation.Account;
                            }
                        }
                        @if (accountKumi == accountBks && accountBks != "")
                        {
                            <div>
                                <b>Лицевой счет КУМИ/БКС:</b> @accountKumi
                            </div>
                        }
                        else
                        {
                            if (item.IdAccount != null)
                            {
                                <div>
                                    <b>Лицевой счет БКС:</b> @accountBks
                                </div>
                            }
                            if (item.IdAccountKumi != null)
                            {
                                <div>
                                    <b>Лицевой счет КУМИ:</b> @accountKumi
                                </div>
                            }
                        }
                        @{
                            var tenantBks = "";
                            var tenantKumi = "";
                            if (lastPaymentInfo != null)
                            {
                                tenantBks = lastPaymentInfo.Tenant;
                            }
                            if (kumiTenancyInfo != null && kumiTenancyInfo.Any())
                            {
                                RegistryDb.Models.Entities.Tenancies.TenancyPerson tenant = null;
                                if (activeKumiTenancyInfo.Any())
                                {
                                    tenant = activeKumiTenancyInfo.FirstOrDefault().Tenant;
                                }
                                else
                                {
                                    tenant = kumiTenancyInfo.FirstOrDefault().Tenant;
                                }
                                tenantKumi = tenant.Surname + " " + tenant.Name + (string.IsNullOrEmpty(tenant.Patronymic) ? "" : " " + tenant.Patronymic);
                            }
                        }
                        @if (tenantKumi == tenantBks && tenantBks != "")
                        {
                            <div>
                                <b>Наниматель КУМИ/БКС:</b> @tenantBks
                            </div>
                        }
                        else
                        {
                            if (tenantBks != "")
                            {
                                <div>
                                    <b>Наниматель БКС:</b> @tenantBks
                                </div>
                            }
                            if (tenantKumi != "")
                            {
                                <div>
                                    <b>Наниматель КУМИ:</b> @tenantKumi
                                </div>
                            }
                            else
                            if (item.IdAccountKumi != null)
                            {
                                <div>
                                    <b>Наниматель КУМИ:</b> <span class="text-danger"><i>не привязан процесс найма</i></span>
                                </div>
                            }
                        }
                    </td>
                    <td>
                        @{
                            List<Address> rentObjectsKumi = null;
                            List<Address> rentObjectsBks = null;
                            if (item.IdAccountKumi != null)
                            {
                                if (kumiTenancyInfo != null && kumiTenancyInfo.Any())
                                {
                                    rentObjectsKumi = kumiTenancyInfo.FirstOrDefault().RentObjects.Select(r => r.Address).ToList();
                                    if (activeKumiTenancyInfo.Any())
                                    {
                                        rentObjectsKumi = activeKumiTenancyInfo.FirstOrDefault().RentObjects.Select(r => r.Address).ToList();
                                    }
                                }
                            }
                            if (item.IdAccount != null && Model.RentObjectsBks.ContainsKey(item.IdAccount.Value))
                            {
                                rentObjectsBks = Model.RentObjectsBks[item.IdAccount.Value];
                            }
                            var joinRentObjects = true;
                            if (rentObjectsKumi != null && rentObjectsBks != null && rentObjectsKumi.Count == rentObjectsBks.Count)
                            {
                                foreach (var rentObjectKumi in rentObjectsKumi)
                                {
                                    if (!rentObjectsBks.Select(r => r.Text).Any(r => r == rentObjectKumi.Text))
                                    {
                                        joinRentObjects = false;
                                    }
                                }
                            }
                            else
                            {
                                joinRentObjects = false;
                            }
                        }
                        @if (joinRentObjects)
                        {
                            <div class="mb-2">
                                <b>По жилищному фонду (ЛС КУМИ/БКС): </b><br />
                                @foreach (var rentObject in rentObjectsKumi)
                                {
                                    @await Component.InvokeAsync("ClaimsAddressComponent", new { address = rentObject, idClaim = item.IdClaim })
                                }
                            </div>
                        }
                        else
                        {
                            if (item.IdAccountKumi != null)
                            {
                                <div class="mb-2">
                                    <b>По жилищному фонду (ЛС КУМИ): </b><br />

                                    @if (rentObjectsKumi != null)
                                    {
                                        @foreach (var rentObject in rentObjectsKumi)
                                        {
                                            @await Component.InvokeAsync("ClaimsAddressComponent", new { address = rentObject, idClaim = item.IdClaim })
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-danger"><i>не привязан процесс найма</i></span>
                                    }
                                </div>
                            }
                            if (item.IdAccount != null && rentObjectsBks != null)
                            {
                                <div class="mb-2">
                                    <b>По жилищному фонду (ЛС БКС): </b><br />
                                    @foreach (var address in rentObjectsBks)
                                    {
                                        @await Component.InvokeAsync("ClaimsAddressComponent", new { address = address, idClaim = item.IdClaim })
                                    }
                                </div>
                            }
                        }

                        @if (item.IdAccount != null)
                        {
                            <div>
                                <b>По БКС: </b><br />@item.IdAccountNavigation.RawAddress<br />
                                @item.IdAccountNavigation.Crn
                            </div>
                        }
                    </td>
                    <td>
                        <div class="btn-group" role="group" aria-label="Панель доступа">
                            <a class="btn btn-primary oi oi-eye" title="Подробнее" aria-label="Подробнее"
                               asp-action="Details" asp-controller="Claims" asp-route-idClaim="@item.IdClaim"></a>
                            <a class="btn btn-danger oi oi-x" title="Удалить" aria-label="Удалить"
                               asp-action="RemoveSessionId" asp-controller="Claims" asp-route-id="@item.IdClaim"></a>
                        </div>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr><td colspan="3" class="text-center"><i>Элементы отсутствуют</i></td></tr>
        }

    </tbody>
</table>

<page-link page-model="Model.PageOptions" page-action="Index"></page-link>

<partial name="ReportsModals" model="@Model">